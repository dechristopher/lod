// This file is automatically generated. DO NOT EDIT.

package geos

// #include "geos.h"
import "C"

{{ range . }}

{{   if (eq .type "unary") }}
{{     $geosFunction := printf "GEOS%s_r" .name }}
{{     if .geosFunction }}
{{       $geosFunction = .geosFunction }}
{{     end }}

// {{ .name }} {{ .comment }}.
func (g *Geom) {{ .name }}() *Geom {
    g.mustNotBeDestroyed()
    g.context.Lock()
    defer g.context.Unlock()
    return g.context.newNonNilGeom(C.{{ $geosFunction }}(g.context.handle, g.geom), nil)
}

{{   else if (eq .type "unaryPredicate") }}

// {{ .name }} {{ .comment }}.
func (g *Geom) {{ .name }}() bool {
	g.mustNotBeDestroyed()
	g.context.Lock()
	defer g.context.Unlock()
	switch C.GEOS{{ .name | replaceAllRegexp "^I" "i" }}_r(g.context.handle, g.geom) {
	case 0:
		return false
	case 1:
		return true
	default:
		panic(g.context.err)
	}
}

{{   else if (eq .type "binaryPredicate") }}

// {{ .name }} {{ .comment }}.
func (g *Geom) {{ .name }}(other *Geom) bool {
	g.mustNotBeDestroyed()
	g.context.Lock()
	defer g.context.Unlock()
	if other.context != g.context {
		other.context.Lock()
		defer other.context.Unlock()
	}
	switch C.GEOS{{ .name }}_r(g.context.handle, g.geom, other.geom) {
	case 0:
		return false
	case 1:
		return true
	default:
		panic(g.context.err)
	}
}

{{   else if (eq .type "float64Property") }}
{{     $geosFunction := printf "GEOS%s_r" .name }}
{{     if .geosFunction }}
{{       $geosFunction = .geosFunction }}
{{     end }}

// {{ .name }} {{ .comment }}.
func (g *Geom) {{ .name }}() float64 {
	g.mustNotBeDestroyed()
	g.context.Lock()
	defer g.context.Unlock()
	var {{ .name | toLower }} float64
    if C.{{ $geosFunction }}(g.context.handle, g.geom, (*C.double)(&{{ .name | toLower }})) == 0 {
		panic(g.context.err)
	}
	return {{ .name | toLower }}
}

{{   end }}

{{ end }}